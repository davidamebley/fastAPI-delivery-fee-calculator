# Python Wolt Delivery Fee Calculator
This is a backend HTTP API developed with Python and FastAPI. It calculates delivery fees based on cart value, delivery distance, number of items, and order time. It is designed to provide a quick and efficient way to determine delivery costs for customers when their shopping cart is ready.

## Setup Instructions

### Prerequisites
- Python 3.8 or higher
- pip (Python package installer)

### Installation
1. Download this project or repository to your local machine.
2. Navigate to the project directory in your terminal. Replace **`` `path/to/project-directory` ``** with the actual path of the project's directory on your machine:
   ```
   cd path/to/project-directory
   ```
3. Create and activate a virtual environment:
   - For Windows:
     ```
     python -m venv venv
     venv\Scripts\activate
     ```
   - For macOS/Linux:
     ```
     python -m venv venv
     source venv/bin/activate
     ```
4. Install the required dependencies:
   ```
   pip install -r requirements.txt
   ```

## Running the Application
To run the application, use the following command in the terminal:
```
uvicorn main:app --reload
```
This will start the FastAPI server, and the application will be accessible at
`http://127.0.0.1:8000`.

## Project Structure
- `main.py`: The entry point of the application.
- `/models`: Contains Pydantic models for structuring request and response data.
- `/services`: Houses the business logic for delivery fee calculation.
- `/routes`: Defines the API endpoints (only a single POST endpoint is defined).
- `/tests`: Includes unit and integration tests for the application.
- `requirements.txt`: Lists all the necessary Python dependencies.

## API Documentation
The API documentation, auto-generated by FastAPI, can be accessed at `http://127.0.0.1:8000/docs` once the server is running. It is interactive and allows you to test API endpoints directly from your browser.

## Testing
To run the tests and ensure the application functions as expected, execute the following command:
```
pytest
```
For checking test coverage, you can use:
```
coverage run -m pytest
coverage report
```

## Feedback and Suggestions
Dear Reviewers,

I understand that providing detailed feedback to everyone may not be feasible, but your insights are highly appreciated. If you find any issues or have any comments, please feel free to reach out to me or submit your suggestions via email at [davameb@gmail.com](mailto:davameb@gmail.com). Your input will be greatly appreciated and will help me improve my work. Thank you for your time and effort.
